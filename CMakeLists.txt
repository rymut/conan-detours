cmake_minimum_required(VERSION 3.15)
project(detours LANGUAGES C CXX)

option(DETOURS_SRC_ROOT "Detours source path" ".")
option(DETOURS_DEBUG "Detours debug" OFF)
option(DETOURS_WITH_PDB "Install PDB if generated by compiler" ON)
if (MSVC)
    option(DETOURS_SOURCE_BROWSING "Detours generate BSC file" OFF)
    option(DETOURS_ANALIZE "Detours analize code using MSVC" OFF)
endif()

if(MSVC)
    string(REGEX REPLACE "/W[1-4]" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
endif()

# object target
set(SRC
    ${DETOURS_SRC_ROOT}/src/creatwth.cpp
    ${DETOURS_SRC_ROOT}/src/detours.cpp
    ${DETOURS_SRC_ROOT}/src/disasm.cpp
    ${DETOURS_SRC_ROOT}/src/disolarm.cpp
    ${DETOURS_SRC_ROOT}/src/disolarm64.cpp
    ${DETOURS_SRC_ROOT}/src/disolia64.cpp
    ${DETOURS_SRC_ROOT}/src/disolx64.cpp
    ${DETOURS_SRC_ROOT}/src/disolx86.cpp
    ${DETOURS_SRC_ROOT}/src/image.cpp
    ${DETOURS_SRC_ROOT}/src/modules.cpp)

add_library(${PROJECT_NAME})
target_sources(${PROJECT_NAME}
    PRIVATE
        ${SRC}
    PUBLIC
        ${DETOURS_SRC_ROOT}/src/detours.h
        ${DETOURS_SRC_ROOT}/src/detver.h)

include(GNUInstallDirs)
install(TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_LIBDIR})
install(FILES
        ${DETOURS_SRC_ROOT}/src/detours.h
        ${DETOURS_SRC_ROOT}/src/detver.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
if (DETOURS_PDB)
    install(FILES "$<TARGET_FILE_DIR:${PROJECT_NAME}>/$<TARGET_FILE_PREFIX:${PROJECT_NAME}>$<TARGET_FILE_BASE_NAME:${PROJECT_NAME}>.pdb" DESTINATION ${CMAKE_INSTALL_LIBDIR} OPTIONAL)
endif()
install(FILES "$<TARGET_FILE_DIR:${PROJECT_NAME}>/$<TARGET_FILE_PREFIX:${PROJECT_NAME}>$<TARGET_FILE_BASE_NAME:${PROJECT_NAME}>.bsc" DESTINATION ${CMAKE_INSTALL_LIBDIR} OPTIONAL)

target_compile_definitions(${PROJECT_NAME} PRIVATE DETOUR_DEBUG=${DETOURS_DEBUG})
if (MSVC AND (NOT CMAKE_CXX_COMPILER_ID STREQUAL "Clang"))
    target_compile_options(${PROJECT_NAME} PUBLIC /we4777 /we4800 /W4 /WX)
    if (DETOURS_SOURCE_BROWSING)
        string(REPLACE "/" "\\" _p "${CMAKE_CURRENT_BINARY_DIR}/src/")
        target_compile_options(${PROJECT_NAME} PRIVATE "/FR${_p}")
    else()
        target_compile_definitions(${PROJECT_NAME} PRIVATE WIN32_LEAN_AND_MEAN _WIN32_WINNT=0x501)
    endif()
    if (DETOURS_ANALIZE)
        target_compile_options(${PROJECT_NAME} PRIVATE "/analize")
    endif()
endif()
